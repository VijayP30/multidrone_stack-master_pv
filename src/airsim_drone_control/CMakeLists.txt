cmake_minimum_required(VERSION 3.0.2)
project(airsim_drone_control)

## Compile as C++11, supported in ROS Kinetic and newer
add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  airsim_ros_pkgs
  aprilslam
  roscpp
  std_msgs
  tf2
  tf2_ros
)

## System dependencies are found with CMake's conventions

find_package(cmake_modules) # needed for find_package(Eigen REQUIRED) to work
# find_package(Boost REQUIRED COMPONENTS system)
find_package(Eigen REQUIRED)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs
# )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include
#  LIBRARIES airsim_drone_control
#  CATKIN_DEPENDS airsim_ros_pkgs aprilslam roscpp std_msgs
  DEPENDS Eigen
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  include
  ${catkin_INCLUDE_DIRS}
  ${Eigen_INCLUDE_DIRS}
)

## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/airsim_drone_control.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
# add_executable(${PROJECT_NAME}_node src/airsim_drone_control_node.cpp)
add_executable(${PROJECT_NAME}_move_drone src/move_drone_along_trajectory.cc src/pd_controller.cpp)
target_link_libraries(${PROJECT_NAME}_move_drone
  ${catkin_LIBRARIES}
  ${Eigen_LIBRARIES}
)

add_executable(${PROJECT_NAME}_ground_truth_relative_tag_pose src/ground_truth_relative_tag_pose.cc)
target_link_libraries(${PROJECT_NAME}_ground_truth_relative_tag_pose
  ${catkin_LIBRARIES}
  ${Eigen_LIBRARIES}
)

add_executable(${PROJECT_NAME}_cam_info_publisher src/broadcast_actual_camera_info.cc)
target_link_libraries(${PROJECT_NAME}_cam_info_publisher
  ${catkin_LIBRARIES}
  ${Eigen_LIBRARIES}
)



## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")
